---
interface Props {
  title: string;
}

const { title } = Astro.props;
import Navbar from "../components/Navbar.astro";
---

<style is:global>
  #canvas {
    position: fixed;
    top: 0;
    left: 0;
    display: block;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
</style>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Take a journey through Wikipedia with a daily challenge! Navigate from one page to another using the fewest clicks in the shortest amount of time."
    />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body
    class="bg-gradient-to-b from-black to-neutral-800 min-h-screen text-neutral-100"
  >
    <canvas id="canvas"></canvas>
    <Navbar />
    <slot />
  </body>
</html>

<script>
  interface Particle {
    radius: number;
    x: number;
    y: number;
    color: string;
    speedx: number;
    speedy: number;
    move: () => void;
  }

  document.addEventListener("DOMContentLoaded", function () {
    /* 
      IIFE - Immediately Invoked Function Expression
      Determine and assign the appropriate requestAnimationFrame function 
      (or a suitable fallback) to the requestAnimFrame variable
      before the rest of the script runs.
    */
    const requestAnimFrame = (function () {
      return (
        window.requestAnimationFrame ||
        function (callback: FrameRequestCallback) {
          window.setTimeout(callback, 1000 / 60);
        }
      );
    })();

    var canvas = document.getElementById("canvas") as HTMLCanvasElement;

    if (!canvas) {
      console.error("Canvas element not found!");
      return;
    }

    var context = canvas.getContext("2d");

    if (!context) {
      console.error("Context not found!");
      return;
    }

    var particle_count = 70,
      particles: Particle[] = [],
      colors = ["#27374D", "#526D82", "#9DB2BF", "#DDE6ED"];

    // Get DPI
    let dpi: number = window.devicePixelRatio || 1;
    context.scale(dpi, dpi);

    function fix_dpi() {
      // Get CSS height
      // The "+"" prefix casts it to an integer
      // The slice method gets rid of "px"
      let style_height = +getComputedStyle(canvas)
        .getPropertyValue("height")
        .slice(0, -2);
      let style_width = +getComputedStyle(canvas)
        .getPropertyValue("width")
        .slice(0, -2);

      // Scale the canvas
      canvas.setAttribute("height", (style_height * dpi).toString());
      canvas.setAttribute("width", (style_width * dpi).toString());
    }

    function createParticle(): Particle {
      // Get the canvas dimensions
      // Sometimes these come up as NaN on Safari
      let canvasWidth = parseInt(
        getComputedStyle(canvas).getPropertyValue("width")
      );
      let canvasHeight = parseInt(
        getComputedStyle(canvas).getPropertyValue("height")
      );

      // Fallback values for Safari
      if (!canvasWidth) {
        canvasWidth = canvas.width / 2;
      }
      if (!canvasHeight) {
        canvasHeight = canvas.height / 2;
      }

      const radius = Math.round(Math.random() * 3 + 5);
      let x = Math.floor(
        Math.random() * (canvasWidth * dpi - radius + 1) + radius
      );

      let y = Math.floor(
        Math.random() * (canvasHeight * dpi - radius + 1) + radius
      );

      const color = colors[Math.floor(Math.random() * colors.length)];
      let speedx = Math.round(Math.random() * 201 + 0) / 100;
      let speedy = Math.round(Math.random() * 201 + 0) / 100;

      switch (Math.round(Math.random() * colors.length)) {
        case 1:
          speedx *= 1;
          speedy *= 1;
          break;
        case 2:
          speedx *= -1;
          speedy *= 1;
          break;
        case 3:
          speedx *= 1;
          speedy *= -1;
          break;
        case 4:
          speedx *= -1;
          speedy *= -1;
          break;
      }

      function move() {
        context.beginPath();
        context.globalCompositeOperation = "source-over";
        context.fillStyle = color;
        context.globalAlpha = 1;
        context.arc(x, y, radius, 0, Math.PI * 2, false);
        context.fill();
        context.closePath();

        x = x + speedx;
        y = y + speedy;

        if (x <= 0 + radius) {
          speedx *= -1;
        }
        if (x >= canvas.width - radius) {
          speedx *= -1;
        }
        if (y <= 0 + radius) {
          speedy *= -1;
        }
        if (y >= canvas.height - radius) {
          speedy *= -1;
        }

        for (var j = 0; j < particle_count; j++) {
          var currParticle = particles[j],
            yd = currParticle.y - y,
            xd = currParticle.x - x,
            d = Math.sqrt(xd * xd + yd * yd);

          if (d < 200) {
            context.beginPath();
            context.globalAlpha = (200 - d) / (200 - 0);
            context.globalCompositeOperation = "destination-over";
            context.lineWidth = 1;
            context.moveTo(x, y);
            context.lineTo(currParticle.x, currParticle.y);
            context.strokeStyle = color;
            context.lineCap = "round";
            context.stroke();
            context.closePath();
          }
        }
      }

      const particle: Particle = {
        radius: radius,
        x: x,
        y: y,
        color: color,
        speedx: speedx,
        speedy: speedy,
        move: move,
      };

      return particle;
    }

    /*
      Core of the particle animation:
      It's designed to be called repeatedly to update 
      the animation frame by frame.

      We invoke it once at the end of the script using animate().
      This starts the animation loop, causing the animation to begin.
      As the animation loop iterates, the animate function will be called repeatedly, 
      creating the appearance of smooth particle movement on the canvas.
    */
    function animate() {
      fix_dpi();
      context.clearRect(0, 0, canvas.width, canvas.height);
      for (var i = 0; i < particle_count; i++) {
        particles[i].move();
      }
      requestAnimFrame(animate);
    }

    for (var i = 0; i < particle_count; i++) {
      fix_dpi();
      var particle: Particle = createParticle();
      particles.push(particle);
    }

    /*
      Overall, the combination of the custom requestAnimFrame function 
      and the animate function (called continuously) 
      makes an animation loop that updates the positions of particles 
      and redraws them on the canvas. 
      This results in the animation you see on the screen.
    */
    animate();
  });
</script>
